{"ast":null,"code":"import csrfFetch from './csrf';\nconst SET_CURRENT_USER = 'session/setCurrentUser';\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\nconst setCurrentUser = user => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: user\n  };\n};\nconst removeCurrentUser = () => {\n  return {\n    type: REMOVE_CURRENT_USER\n  };\n};\nconst storeCSRFToken = response => {\n  const csrfToken = response.headers.get(\"X-CSRF-Token\");\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n};\nconst storeCurrentUser = user => {\n  if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));else sessionStorage.removeItem(\"currentUser\");\n};\nexport const signup = user => async dispatch => {\n  const {\n    username,\n    email,\n    password\n  } = user;\n  const response = await csrfFetch(\"/api/users\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      username,\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nexport const login = _ref => {\n  let {\n    credential,\n    password\n  } = _ref;\n  return async dispatch => {\n    debugger;\n    const response = await csrfFetch(\"/api/session\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        credential,\n        password\n      })\n    });\n    const data = await response.json();\n    debugger;\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return response;\n  };\n};\nexport const restoreSession = () => async dispatch => {\n  const response = await csrfFetch(\"/api/session\");\n  storeCSRFToken(response);\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nexport const logout = () => async dispatch => {\n  const response = await csrfFetch(\"/api/session\", {\n    method: \"DELETE\"\n  });\n  storeCurrentUser(null);\n  dispatch(removeCurrentUser());\n  return response;\n};\nconst initialState = {\n  user: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n};\nconst sessionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      debugger;\n      return {\n        ...state,\n        user: action.payload\n      };\n    case REMOVE_CURRENT_USER:\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\nexport default sessionReducer;","map":{"version":3,"names":["csrfFetch","SET_CURRENT_USER","REMOVE_CURRENT_USER","setCurrentUser","user","type","payload","removeCurrentUser","storeCSRFToken","response","csrfToken","headers","get","sessionStorage","setItem","storeCurrentUser","JSON","stringify","removeItem","signup","dispatch","username","email","password","method","body","data","json","login","credential","restoreSession","logout","initialState","parse","getItem","sessionReducer","state","action"],"sources":["/home/jcar/dev/aAclasswork/w12d3/authenticate-me/frontend/src/store/session.js"],"sourcesContent":["import csrfFetch from './csrf';\n\nconst SET_CURRENT_USER = 'session/setCurrentUser';\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\n\nconst setCurrentUser = (user) => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: user\n    };\n};\n\nconst removeCurrentUser = () => {\n    return {\n        type: REMOVE_CURRENT_USER\n    };\n};\n\nconst storeCSRFToken = response => {\n    const csrfToken = response.headers.get(\"X-CSRF-Token\");\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n}\n\nconst storeCurrentUser = user => {\n    if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));\n    else sessionStorage.removeItem(\"currentUser\");\n}\n\nexport const signup = (user) => async (dispatch) => {\n    const { username, email, password } = user;\n    const response = await csrfFetch(\"/api/users\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            username,\n            email,\n            password\n        })\n    });\n    const data = await response.json();\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nexport const login = ({ credential, password }) => async dispatch => {\n    debugger\n    const response = await csrfFetch(\"/api/session\", {\n        method: \"POST\",\n        body: JSON.stringify({ \n            credential,\n            password \n        })\n    });\n    const data = await response.json();\n    debugger\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nexport const restoreSession = () => async dispatch => {\n    const response = await csrfFetch(\"/api/session\");\n    storeCSRFToken(response);\n    const data = await response.json();\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nexport const logout = () => async (dispatch) => {\n    const response = await csrfFetch(\"/api/session\", {\n        method: \"DELETE\"\n    });\n    storeCurrentUser(null);\n    dispatch(removeCurrentUser());\n    return response;\n};\n\nconst initialState = {\n    user: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n};\n\nconst sessionReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            debugger\n            return { ...state, user: action.payload };\n        case REMOVE_CURRENT_USER:\n            return { ...state, user: null };\n        default:\n            return state;\n    }\n};\n\nexport default sessionReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}