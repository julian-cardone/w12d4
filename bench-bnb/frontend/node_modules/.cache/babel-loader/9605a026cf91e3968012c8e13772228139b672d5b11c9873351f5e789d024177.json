{"ast":null,"code":"import csrfFetch from \"./csrf\";\nexport const SET_BENCHES = \"benches/SET_BENCHES\";\nexport const ADD_BENCH = \"benches/ADD_BENCH\";\nexport const SET_BENCH = \"benches/SET_BENCH\";\nconst setBenches = benches => {\n  return {\n    type: SET_BENCHES,\n    benches\n  };\n};\nconst setBench = benchId => {\n  return {\n    type: SET_BENCH,\n    benchId\n  };\n};\nconst addBench = bench => {\n  return {\n    type: ADD_BENCH,\n    bench\n  };\n};\n\n//selector\nexport const getBenches = state => state.benches ? Object.values(state.benches) : [];\nexport const getBench = benchId => state => state.benches ? state.benches[benchId] : null;\nexport const fetchBenches = () => async dispatch => {\n  const res = await csrfFetch(\"/api/benches\");\n  const data = await res.json();\n  dispatch(setBenches(data));\n};\nexport const fetchBench = benchId => async dispatch => {\n  const res = await csrfFetch(`/api/benches/${benchId}`);\n  const data = await res.json();\n  dispatch(addBench(data));\n};\nexport const createBench = benchData => async dispatch => {\n  const res = await csrfFetch(`/api/benches}`, {\n    method: \"POST\",\n    body: JSON.stringify(benchData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await res.json();\n  dispatch(addBench(data));\n};\nexport default function benchesReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const nextState = {\n    ...state\n  };\n  switch (action.type) {\n    case SET_BENCHES:\n      return {\n        ...state,\n        ...action.benches\n      };\n    case SET_BENCH:\n      nextState[action.bench.id] = action.bench;\n    case ADD_BENCH:\n      nextState[action.bench.id] = action.bench;\n      return nextState;\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["csrfFetch","SET_BENCHES","ADD_BENCH","SET_BENCH","setBenches","benches","type","setBench","benchId","addBench","bench","getBenches","state","Object","values","getBench","fetchBenches","dispatch","res","data","json","fetchBench","createBench","benchData","method","body","JSON","stringify","headers","benchesReducer","action","nextState","id"],"sources":["/home/jcar/dev/aAclasswork/w12d4/bench-bnb/frontend/src/store/benches.js"],"sourcesContent":["import csrfFetch from \"./csrf\"\n\nexport const SET_BENCHES = \"benches/SET_BENCHES\"\nexport const ADD_BENCH = \"benches/ADD_BENCH\"\nexport const SET_BENCH = \"benches/SET_BENCH\"\n\nconst setBenches = (benches) =>{\n  return {\n    type: SET_BENCHES,\n    benches\n  }\n}\n\nconst setBench = (benchId) =>{\n  return {\n    type: SET_BENCH,\n    benchId\n  }\n}\n\nconst addBench = (bench) =>{\n  return {\n    type: ADD_BENCH,\n    bench\n  }\n}\n\n//selector\nexport const getBenches = (state) => \n  state.benches ? Object.values(state.benches) : [];\n\nexport const getBench = (benchId) => (state) => \n  state.benches ? state.benches[benchId] : null;\n\nexport const fetchBenches = () => async (dispatch) =>{\n  const res = await csrfFetch(\"/api/benches\")\n\n  const data = await res.json();\n\n  dispatch(setBenches(data))\n}\n\nexport const fetchBench = (benchId) => async (dispatch) =>{\n  const res = await csrfFetch(`/api/benches/${benchId}`)\n\n  const data = await res.json();\n\n  dispatch(addBench(data))\n}\n\nexport const createBench = (benchData) => async (dispatch) =>{\n  const res = await csrfFetch(`/api/benches}`,{\n    method: \"POST\",\n    body: JSON.stringify(benchData),\n    headers: {\"Content-Type\":\"application/json\"}\n  })\n\n  const data = await res.json();\n\n  dispatch(addBench(data))\n}\n\nexport default function benchesReducer(state={}, action){\n  const nextState = { ...state }\n  switch (action.type){\n    case SET_BENCHES:\n      return { ...state, ...action.benches }\n    case SET_BENCH:\n      nextState[action.bench.id]=action.bench\n    case ADD_BENCH:\n      nextState[action.bench.id]=action.bench\n      return nextState\n    default: return state\n  }\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,QAAQ;AAE9B,OAAO,MAAMC,WAAW,GAAG,qBAAqB;AAChD,OAAO,MAAMC,SAAS,GAAG,mBAAmB;AAC5C,OAAO,MAAMC,SAAS,GAAG,mBAAmB;AAE5C,MAAMC,UAAU,GAAIC,OAAO,IAAI;EAC7B,OAAO;IACLC,IAAI,EAAEL,WAAW;IACjBI;EACF,CAAC;AACH,CAAC;AAED,MAAME,QAAQ,GAAIC,OAAO,IAAI;EAC3B,OAAO;IACLF,IAAI,EAAEH,SAAS;IACfK;EACF,CAAC;AACH,CAAC;AAED,MAAMC,QAAQ,GAAIC,KAAK,IAAI;EACzB,OAAO;IACLJ,IAAI,EAAEJ,SAAS;IACfQ;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAIC,KAAK,IAC9BA,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACC,MAAM,CAACF,KAAK,CAACP,OAAO,CAAC,GAAG,EAAE;AAEnD,OAAO,MAAMU,QAAQ,GAAIP,OAAO,IAAMI,KAAK,IACzCA,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,CAACG,OAAO,CAAC,GAAG,IAAI;AAE/C,OAAO,MAAMQ,YAAY,GAAG,MAAM,MAAOC,QAAQ,IAAI;EACnD,MAAMC,GAAG,GAAG,MAAMlB,SAAS,CAAC,cAAc,CAAC;EAE3C,MAAMmB,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAI,EAAE;EAE7BH,QAAQ,CAACb,UAAU,CAACe,IAAI,CAAC,CAAC;AAC5B,CAAC;AAED,OAAO,MAAME,UAAU,GAAIb,OAAO,IAAK,MAAOS,QAAQ,IAAI;EACxD,MAAMC,GAAG,GAAG,MAAMlB,SAAS,CAAE,gBAAeQ,OAAQ,EAAC,CAAC;EAEtD,MAAMW,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAI,EAAE;EAE7BH,QAAQ,CAACR,QAAQ,CAACU,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMG,WAAW,GAAIC,SAAS,IAAK,MAAON,QAAQ,IAAI;EAC3D,MAAMC,GAAG,GAAG,MAAMlB,SAAS,CAAE,eAAc,EAAC;IAC1CwB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC;IAC/BK,OAAO,EAAE;MAAC,cAAc,EAAC;IAAkB;EAC7C,CAAC,CAAC;EAEF,MAAMT,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAI,EAAE;EAE7BH,QAAQ,CAACR,QAAQ,CAACU,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,eAAe,SAASU,cAAc,GAAkB;EAAA,IAAjBjB,KAAK,uEAAC,CAAC,CAAC;EAAA,IAAEkB,MAAM;EACrD,MAAMC,SAAS,GAAG;IAAE,GAAGnB;EAAM,CAAC;EAC9B,QAAQkB,MAAM,CAACxB,IAAI;IACjB,KAAKL,WAAW;MACd,OAAO;QAAE,GAAGW,KAAK;QAAE,GAAGkB,MAAM,CAACzB;MAAQ,CAAC;IACxC,KAAKF,SAAS;MACZ4B,SAAS,CAACD,MAAM,CAACpB,KAAK,CAACsB,EAAE,CAAC,GAACF,MAAM,CAACpB,KAAK;IACzC,KAAKR,SAAS;MACZ6B,SAAS,CAACD,MAAM,CAACpB,KAAK,CAACsB,EAAE,CAAC,GAACF,MAAM,CAACpB,KAAK;MACvC,OAAOqB,SAAS;IAClB;MAAS,OAAOnB,KAAK;EAAA;AAEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}