{"ast":null,"code":"export function storeCSRFToken(response) {\n  const csrfToken = response.headers.get(\"X-CSRF-Token\");\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n}\nexport async function restoreCSRF() {\n  const response = await csrfFetch(\"/api/session\");\n  storeCSRFToken(response);\n  return response;\n}\nasync function csrfFetch(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there are no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n  // \"application/json\" and the \"X-CSRF-Token\" header to the value of the \n  // \"X-CSRF-Token\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n  }\n\n  // call fetch with the url and the updated options hash\n  const res = await fetch(url, options);\n\n  // if the response status code is 400 or above, then throw an error with the\n  // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n  // next promise chain\n  return res;\n}\nexport default csrfFetch;","map":{"version":3,"names":["storeCSRFToken","response","csrfToken","headers","get","sessionStorage","setItem","restoreCSRF","csrfFetch","url","options","method","toUpperCase","getItem","res","fetch","status"],"sources":["/home/jcar/dev/aAclasswork/w12d3/authenticate-me/frontend/src/store/csrf.js"],"sourcesContent":["export function storeCSRFToken(response) {\n    const csrfToken = response.headers.get(\"X-CSRF-Token\");\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n}\n\nexport async function restoreCSRF() {\n    const response = await csrfFetch(\"/api/session\");\n    storeCSRFToken(response);\n    return response;\n}\n\nasync function csrfFetch(url, options = {}) {\n    // set options.method to 'GET' if there is no method\n    options.method = options.method || 'GET';\n    // set options.headers to an empty object if there are no headers\n    options.headers = options.headers || {};\n\n    // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\" and the \"X-CSRF-Token\" header to the value of the \n    // \"X-CSRF-Token\" cookie\n    if (options.method.toUpperCase() !== 'GET') {\n        options.headers['Content-Type'] =\n            options.headers['Content-Type'] || 'application/json';\n        options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n    }\n\n    // call fetch with the url and the updated options hash\n    const res = await fetch(url, options);\n\n    // if the response status code is 400 or above, then throw an error with the\n    // error being the response\n    if (res.status >= 400) throw res;\n\n    // if the response status code is under 400, then return the response to the\n    // next promise chain\n    return res;\n}\n\nexport default csrfFetch;"],"mappings":"AAAA,OAAO,SAASA,cAAc,CAACC,QAAQ,EAAE;EACrC,MAAMC,SAAS,GAAGD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EACtD,IAAIF,SAAS,EAAEG,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEJ,SAAS,CAAC;AACpE;AAEA,OAAO,eAAeK,WAAW,GAAG;EAChC,MAAMN,QAAQ,GAAG,MAAMO,SAAS,CAAC,cAAc,CAAC;EAChDR,cAAc,CAACC,QAAQ,CAAC;EACxB,OAAOA,QAAQ;AACnB;AAEA,eAAeO,SAAS,CAACC,GAAG,EAAgB;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EACtC;EACAA,OAAO,CAACC,MAAM,GAAGD,OAAO,CAACC,MAAM,IAAI,KAAK;EACxC;EACAD,OAAO,CAACP,OAAO,GAAGO,OAAO,CAACP,OAAO,IAAI,CAAC,CAAC;;EAEvC;EACA;EACA;EACA,IAAIO,OAAO,CAACC,MAAM,CAACC,WAAW,EAAE,KAAK,KAAK,EAAE;IACxCF,OAAO,CAACP,OAAO,CAAC,cAAc,CAAC,GAC3BO,OAAO,CAACP,OAAO,CAAC,cAAc,CAAC,IAAI,kBAAkB;IACzDO,OAAO,CAACP,OAAO,CAAC,cAAc,CAAC,GAAGE,cAAc,CAACQ,OAAO,CAAC,cAAc,CAAC;EAC5E;;EAEA;EACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAEC,OAAO,CAAC;;EAErC;EACA;EACA,IAAII,GAAG,CAACE,MAAM,IAAI,GAAG,EAAE,MAAMF,GAAG;;EAEhC;EACA;EACA,OAAOA,GAAG;AACd;AAEA,eAAeN,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}