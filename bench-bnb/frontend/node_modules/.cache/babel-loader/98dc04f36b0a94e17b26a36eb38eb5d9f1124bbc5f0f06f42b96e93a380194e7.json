{"ast":null,"code":"var _jsxFileName = \"/home/jcar/dev/aAclasswork/w12d3/authenticate-me/frontend/src/components/LoginFormModal/index.js\",\n  _s = $RefreshSig$();\n// // frontend/src/components/LoginFormPage/index.js\n\n// import React, { useState } from 'react';\n// import * as sessionActions from '../../store/session';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import './LoginForm.css'\n\n// function LoginFormPage() {\n//     const dispatch = useDispatch();\n//     const sessionUser = useSelector(state => state.session.user);\n//     const [credential, setCredential] = useState('');\n//     const [password, setPassword] = useState('');\n//     const [errors, setErrors] = useState([]);\n\n//     if (sessionUser) return <Redirect to=\"/\" />;\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         setErrors([]);\n//         return dispatch(sessionActions.login({ credential, password }))\n//             .catch(async (res) => {\n//                 let data;\n//                 try {\n//                     // .clone() essentially allows you to read the response body twice\n//                     data = await res.clone().json();\n//                 } catch {\n//                     data = await res.text(); // Will hit this case if the server is down\n//                 }\n//                 if (data?.errors) setErrors(data.errors);\n//                 else if (data) setErrors([data]);\n//                 else setErrors([res.statusText]);\n//             });\n//     }\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <ul>\n//                 {errors.map(error => <li key={error}>{error}</li>)}\n//             </ul>\n//             <label>\n//                 Username or Email\n//                 <input\n//                     type=\"text\"\n//                     value={credential}\n//                     onChange={(e) => setCredential(e.target.value)}\n//                     required\n//                 />\n//             </label>\n//             <label>\n//                 Password\n//                 <input\n//                     type=\"password\"\n//                     value={password}\n//                     onChange={(e) => setPassword(e.target.value)}\n//                     required\n//                 />\n//             </label>\n//             <button type=\"submit\">Log In</button>\n//         </form>\n//     );\n// }\n\n// export default LoginFormPage;\n\n// frontend/src/components/LoginFormModal/index.js\n\nimport React, { useState } from 'react';\nimport { Modal } from '../../context/Modal';\nimport LoginForm from './LoginForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction LoginFormModal() {\n  _s();\n  const [showModal, setShowModal] = useState(false);\n  debugger;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowModal(true),\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => setShowModal(false),\n      children: /*#__PURE__*/_jsxDEV(LoginForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(LoginFormModal, \"uVlnG5KLfXemZk5i5Fl+Cg356FU=\");\n_c = LoginFormModal;\nexport default LoginFormModal;\nvar _c;\n$RefreshReg$(_c, \"LoginFormModal\");","map":{"version":3,"names":["React","useState","Modal","LoginForm","LoginFormModal","showModal","setShowModal"],"sources":["/home/jcar/dev/aAclasswork/w12d3/authenticate-me/frontend/src/components/LoginFormModal/index.js"],"sourcesContent":["// // frontend/src/components/LoginFormPage/index.js\n\n// import React, { useState } from 'react';\n// import * as sessionActions from '../../store/session';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import './LoginForm.css'\n\n// function LoginFormPage() {\n//     const dispatch = useDispatch();\n//     const sessionUser = useSelector(state => state.session.user);\n//     const [credential, setCredential] = useState('');\n//     const [password, setPassword] = useState('');\n//     const [errors, setErrors] = useState([]);\n\n//     if (sessionUser) return <Redirect to=\"/\" />;\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         setErrors([]);\n//         return dispatch(sessionActions.login({ credential, password }))\n//             .catch(async (res) => {\n//                 let data;\n//                 try {\n//                     // .clone() essentially allows you to read the response body twice\n//                     data = await res.clone().json();\n//                 } catch {\n//                     data = await res.text(); // Will hit this case if the server is down\n//                 }\n//                 if (data?.errors) setErrors(data.errors);\n//                 else if (data) setErrors([data]);\n//                 else setErrors([res.statusText]);\n//             });\n//     }\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <ul>\n//                 {errors.map(error => <li key={error}>{error}</li>)}\n//             </ul>\n//             <label>\n//                 Username or Email\n//                 <input\n//                     type=\"text\"\n//                     value={credential}\n//                     onChange={(e) => setCredential(e.target.value)}\n//                     required\n//                 />\n//             </label>\n//             <label>\n//                 Password\n//                 <input\n//                     type=\"password\"\n//                     value={password}\n//                     onChange={(e) => setPassword(e.target.value)}\n//                     required\n//                 />\n//             </label>\n//             <button type=\"submit\">Log In</button>\n//         </form>\n//     );\n// }\n\n// export default LoginFormPage;\n\n// frontend/src/components/LoginFormModal/index.js\n\nimport React, { useState } from 'react';\nimport { Modal } from '../../context/Modal';\nimport LoginForm from './LoginForm';\n\nfunction LoginFormModal() {\n    const [showModal, setShowModal] = useState(false);\n    debugger\n    return (\n        <>\n            <button onClick={() => setShowModal(true)}>Log In</button>\n            {showModal && (\n                <Modal onClose={() => setShowModal(false)}>\n                    <LoginForm />\n                </Modal>\n            )}\n        </>\n    );\n}\n\nexport default LoginFormModal;"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,OAAOC,SAAS,MAAM,aAAa;AAAC;AAAA;AAEpC,SAASC,cAAc,GAAG;EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD;EACA,oBACI;IAAA,wBACI;MAAQ,OAAO,EAAE,MAAMK,YAAY,CAAC,IAAI,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB,EACzDD,SAAS,iBACN,QAAC,KAAK;MAAC,OAAO,EAAE,MAAMC,YAAY,CAAC,KAAK,CAAE;MAAA,uBACtC,QAAC,SAAS;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QAEpB;EAAA,gBACF;AAEX;AAAC,GAbQF,cAAc;AAAA,KAAdA,cAAc;AAevB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}