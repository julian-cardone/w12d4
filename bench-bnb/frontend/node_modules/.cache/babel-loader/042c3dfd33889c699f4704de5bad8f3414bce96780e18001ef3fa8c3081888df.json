{"ast":null,"code":"var _jsxFileName = \"/home/jcar/dev/aAclasswork/w12d3/authenticate-me/frontend/src/index.js\";\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import { Provider } from 'react-redux';\n// import { BrowserRouter } from 'react-router-dom';\n// import './index.css';\n// import App from './App';\n// import configureStore from './store';\n// import csrfFetch, { restoreCSRF } from './store/csrf';\n// import * as sessionActions from './store/session';\n\n// const store = configureStore();\n\n// if (process.env.NODE_ENV !== 'production') {\n//   window.store = store;\n//   window.csrfFetch = csrfFetch;\n//   window.sessionActions = sessionActions;\n// }\n\n// function Root() {\n//   return (\n//     <Provider store={store}>\n//       <BrowserRouter>\n//         <App />\n//       </BrowserRouter>\n//     </Provider>\n//   );\n// }\n\n// const renderApplication = () => {\n//   ReactDOM.render(\n//     <React.StrictMode>\n//       <Root />\n//     </React.StrictMode>,\n//     document.getElementById('root')\n//   );\n// }\n\n// if (\n//   sessionStorage.getItem(\"currentUser\") === null ||\n//   sessionStorage.getItem(\"X-CSRF-Token\") === null\n// ) {\n//   store.dispatch(sessionActions.restoreSession()).then(renderApplication);\n// } else {\n//   renderApplication();\n// }\n\n// frontend/src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ModalProvider } from \"./context/Modal\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport configureStore from \"./store\";\nimport csrfFetch from \"./store/csrf\";\nimport * as sessionActions from \"./store/session\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst store = configureStore();\nif (process.env.NODE_ENV !== \"production\") {\n  window.store = store;\n  window.csrfFetch = csrfFetch;\n  window.sessionActions = sessionActions;\n}\nfunction Root() {\n  return /*#__PURE__*/_jsxDEV(ModalProvider, {\n    children: /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n        children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_c = Root;\nconst renderApplication = () => {\n  debugger;\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this), document.getElementById('root'));\n};\nif (sessionStorage.getItem(\"currentUser\") === null || sessionStorage.getItem(\"X-CSRF-Token\") === null) {\n  store.dispatch(sessionActions.restoreSession()).then(renderApplication);\n} else {\n  renderApplication();\n}\nvar _c;\n$RefreshReg$(_c, \"Root\");","map":{"version":3,"names":["React","ReactDOM","Provider","BrowserRouter","ModalProvider","App","configureStore","csrfFetch","sessionActions","store","process","env","NODE_ENV","window","Root","renderApplication","render","document","getElementById","sessionStorage","getItem","dispatch","restoreSession","then"],"sources":["/home/jcar/dev/aAclasswork/w12d3/authenticate-me/frontend/src/index.js"],"sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import { Provider } from 'react-redux';\n// import { BrowserRouter } from 'react-router-dom';\n// import './index.css';\n// import App from './App';\n// import configureStore from './store';\n// import csrfFetch, { restoreCSRF } from './store/csrf';\n// import * as sessionActions from './store/session';\n\n// const store = configureStore();\n\n// if (process.env.NODE_ENV !== 'production') {\n//   window.store = store;\n//   window.csrfFetch = csrfFetch;\n//   window.sessionActions = sessionActions;\n// }\n\n// function Root() {\n//   return (\n//     <Provider store={store}>\n//       <BrowserRouter>\n//         <App />\n//       </BrowserRouter>\n//     </Provider>\n//   );\n// }\n\n// const renderApplication = () => {\n//   ReactDOM.render(\n//     <React.StrictMode>\n//       <Root />\n//     </React.StrictMode>,\n//     document.getElementById('root')\n//   );\n// }\n\n// if (\n//   sessionStorage.getItem(\"currentUser\") === null ||\n//   sessionStorage.getItem(\"X-CSRF-Token\") === null\n// ) {\n//   store.dispatch(sessionActions.restoreSession()).then(renderApplication);\n// } else {\n//   renderApplication();\n// }\n\n// frontend/src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ModalProvider } from \"./context/Modal\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport configureStore from \"./store\";\nimport csrfFetch from \"./store/csrf\";\nimport * as sessionActions from \"./store/session\";\n\nconst store = configureStore();\n\nif (process.env.NODE_ENV !== \"production\") {\n  window.store = store;\n  window.csrfFetch = csrfFetch;\n  window.sessionActions = sessionActions;\n}\n\nfunction Root() {\n  return (\n    <ModalProvider>\n      <Provider store={store}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </Provider>\n    </ModalProvider>\n  );\n}\n\nconst renderApplication = () => {\n  debugger\n  ReactDOM.render(\n    <React.StrictMode>\n      <Root />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nif (\n  sessionStorage.getItem(\"currentUser\") === null ||\n  sessionStorage.getItem(\"X-CSRF-Token\") === null\n) {\n  store.dispatch(sessionActions.restoreSession()).then(renderApplication);\n} else {\n  renderApplication();\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,cAAc,MAAM,SAAS;AACpC,OAAOC,SAAS,MAAM,cAAc;AACpC,OAAO,KAAKC,cAAc,MAAM,iBAAiB;AAAC;AAElD,MAAMC,KAAK,GAAGH,cAAc,EAAE;AAE9B,IAAII,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCC,MAAM,CAACJ,KAAK,GAAGA,KAAK;EACpBI,MAAM,CAACN,SAAS,GAAGA,SAAS;EAC5BM,MAAM,CAACL,cAAc,GAAGA,cAAc;AACxC;AAEA,SAASM,IAAI,GAAG;EACd,oBACE,QAAC,aAAa;IAAA,uBACZ,QAAC,QAAQ;MAAC,KAAK,EAAEL,KAAM;MAAA,uBACrB,QAAC,aAAa;QAAA,uBACZ,QAAC,GAAG;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA;IACO;MAAA;MAAA;MAAA;IAAA;EACP;IAAA;IAAA;IAAA;EAAA,QACG;AAEpB;AAAC,KAVQK,IAAI;AAYb,MAAMC,iBAAiB,GAAG,MAAM;EAC9B;EACAd,QAAQ,CAACe,MAAM,eACb,QAAC,KAAK,CAAC,UAAU;IAAA,uBACf,QAAC,IAAI;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACS,EACnBC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAChC;AACH,CAAC;AAED,IACEC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI,IAC9CD,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,KAAK,IAAI,EAC/C;EACAX,KAAK,CAACY,QAAQ,CAACb,cAAc,CAACc,cAAc,EAAE,CAAC,CAACC,IAAI,CAACR,iBAAiB,CAAC;AACzE,CAAC,MAAM;EACLA,iBAAiB,EAAE;AACrB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}